CREATE DATABASE UNIEATS_DB;

USE UNIEATS_DB;

CREATE TABLE ROLES(
    ROLE_ID INT PRIMARY KEY AUTO_INCREMENT,
    ROLE_NAME VARCHAR(30) NOT NULL UNIQUE
);

CREATE TABLE USERS(
    USER_ID INT PRIMARY KEY AUTO_INCREMENT,
    FIRST_NAME VARCHAR(50) NOT NULL,
    SECOND_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50) NOT NULL,
    SECOND_LAST_NAME VARCHAR(50) NOT NULL,
    CC_NUMBER VARCHAR(20) NOT NULL UNIQUE,
    INSTITUTIONAL_EMAIL VARCHAR(100) NOT NULL UNIQUE,
    ADDRESS VARCHAR(150),
    PASSWORD VARCHAR(255) NOT NULL,
    ROLE_ID INT NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ROLE_ID),
    CHECK (CHAR_LENGTH(PASSWORD) >= 8)
);

CREATE TABLE PHONES(
    PHONE_ID INT PRIMARY KEY AUTO_INCREMENT,
    USER_ID INT NOT NULL,
    PHONE_NUMBER VARCHAR(20) NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
    ON DELETE CASCADE,
    CHECK (CHAR_LENGTH(PHONE_NUMBER) >= 10)
);

CREATE TABLE CAFES(
    CAFE_ID INT PRIMARY KEY AUTO_INCREMENT,
    CAFE_NAME VARCHAR(50) NOT NULL UNIQUE,
    CAFE_LOCATION VARCHAR(100) NOT NULL,
    COMPANY_NAME VARCHAR(100) NOT NULL UNIQUE
);

CREATE TABLE WORKSTATION(
    WORKSTATION_ID INT PRIMARY KEY AUTO_INCREMENT,
    WORKSTATION_NAME VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE EMPLOYEES_CAFE(
    EMPLOYEES_ID INT PRIMARY KEY AUTO_INCREMENT,
    USER_ID INT NOT NULL,
    CAFE_ID INT NOT NULL,
    WORKSTATION_ID INT NOT NULL,
    HIRED_AT DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FIRED_AT DATETIME DEFAULT NULL,
    IS_ACTIVE BOOLEAN NOT NULL DEFAULT TRUE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (CAFE_ID) REFERENCES CAFES(CAFE_ID),
    FOREIGN KEY (WORKSTATION_ID) REFERENCES WORKSTATION(WORKSTATION_ID)
    ON DELETE CASCADE,
    UNIQUE (USER_ID, CAFE_ID, WORKSTATION_ID)
);

CREATE TABLE CATEGORIES(
    CATEGORY_ID INT PRIMARY KEY AUTO_INCREMENT,
    CATEGORY_NAME VARCHAR(50) NOT NULL UNIQUE,
    CAT_DESCRIPTION TEXT
);

CREATE TABLE PRODUCTS(
    PRODUCT_ID INT PRIMARY KEY AUTO_INCREMENT,
    CATEGORY_ID INT NOT NULL,
    CAFE_ID INT NOT NULL,
    PRODUCT_NAME VARCHAR(100) NOT NULL UNIQUE,
    P_DESCRIPTION TEXT NULL,
    PRICE DECIMAL(10,2) NOT NULL,
    STOCK INT NOT NULL,
    FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES(CATEGORY_ID),
    FOREIGN KEY (CAFE_ID) REFERENCES CAFES(CAFE_ID),
    CHECK (PRICE > 0),
    CHECK (STOCK >= 0)
);

CREATE TABLE ORDERS(
    ORDER_ID INT PRIMARY KEY AUTO_INCREMENT,
    USER_ID INT NOT NULL,
    CAFE_ID INT NOT NULL,
    ORDER_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ORDER_STATUS ENUM('PENDING', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED') NOT NULL,
    TOTAL_AMOUNT DECIMAL(10,2) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (CAFE_ID) REFERENCES CAFES(CAFE_ID),
    CHECK (TOTAL_AMOUNT > 0)
);

CREATE TABLE ORDER_DETAILS(
    DETAIL_ID INT PRIMARY KEY AUTO_INCREMENT,
    ORDER_ID INT NOT NULL,
    PRODUCT_ID INT NOT NULL,
    QUANTITY INT NOT NULL,
    UNIT_PRICE DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID)
    UNIQUE (ORDER_ID, PRODUCT_ID),
    CHECK (QUANTITY > 0),
    CHECK (UNIT_PRICE > 0)
); 

CREATE TABLE PAYMENT_METHODS(
    PAYMENT_METHOD_ID INT PRIMARY KEY AUTO_INCREMENT,
    USER_ID INT NOT NULL,
    METHOD_NAME VARCHAR(50) NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
    ON DELETE CASCADE
);

CREATE TABLE PAYMENTS(
    PAYMENT_ID INT PRIMARY KEY AUTO_INCREMENT,
    ORDER_ID INT NOT NULL,
    PAYMENT_METHOD_ID INT NOT NULL,
    AMOUNT_PAID DECIMAL(10,2) NOT NULL,
    PAYMENT_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PAYMENT_STATUS ENUM('PAID', 'PENDING', 'CANCELLED') NOT NULL,
    REFERENCE_CODE VARCHAR(100) UNIQUE,
    IS_REFUNDED BOOLEAN NOT NULL DEFAULT FALSE,
    FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
    FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHODS(PAYMENT_METHOD_ID)
    ON DELETE CASCADE,
    CHECK (AMOUNT_PAID > 0)
);